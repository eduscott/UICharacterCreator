const eyeColorNames = ["Green", "Emerald", "Light blue", "Ocean blue", "Light brown", "Dark brown", "Hazel", "Dark gray", "Light gray", "Pink", "Yellow", "Purple", "Blackout", "Shades of Gray", "Tequila Sunrise", "Atomic", "Warp", "ECola", "Space Ranger", "Ying Yang", "Bullseye", "Lizard", "Dragon", "Extra Terrestrial", "Goat", "Smiley", "Possessed", "Demon", "Infected", "Alien", "Undead", "Zombie"];
let charDataGender = 0;
let charDataHair = 0;
let charDataHairColor = 0;
let charDataHairColorHighlight = 0;
let charDataFace = {
    NoseWidth : 0.0,
    NoseHeight : 0.0,
    NoseLength : 0.0,
    NoseBridge : 0.0,
    NoseTip : 0.0,
    NoseShift : 0.0,
    BrowWidth : 0.0,
    BrowHeight : 0.0,
    CheekboneHeight : 0.0,
    CheekboneWidth : 0.0,
    CheeksWidth : 0.0,
    EyesWidth : 0.0,
    LipsWidth : 0.0,
    JawWidth : 0.0,
    JawHeight : 0.0,
    ChinLength : 0.0,
    ChinPosition : 0.0,
    ChinWidth : 0.0,
    ChinHeight : 0.0,
    NeckHeight : 0.0
}
let charDataParents = {
    ShapeFirstID : 0,
    ShapeSecondID : 0,
    ShapeThirdID : 0,
    SkinFirstID : 0,
    SkinSecondID : 0,
    SkinThirdID : 0,
    ShapeMix : 0.0,
    SkinMix : 0.0,
    ThirdMix : 0.0
}
let charDataOverlay = {
    Blemishes : 0,
    FacialHair : 0,
    Eyebrows : 0,
    Ageing: 0,
    Makeup: 0,
    Blush: 0,
    Complexion: 0,
    SunDamage: 0,
    Lipstick: 0,
    Freckles: 0,
    ChestHair: 0,
    BodyBlemishes: 0,
    AddBodyBlemishes: 0
}
let charDataOverlayColor = {
    Blemishes : {"color": 0, "color2": 0},
    FacialHair : {"color": 0, "color2": 0},
    Eyebrows : {"color": 0, "color2": 0},
    Ageing: {"color": 0, "color2": 0},
    Makeup: {"color": 0, "color2": 0},
    Blush: {"color": 0, "color2": 0},
    Complexion: {"color": 0, "color2": 0},
    SunDamage: {"color": 0, "color2": 0},
    Lipstick: {"color": 0, "color2": 0},
    Freckles: {"color": 0, "color2": 0},
    ChestHair: {"color": 0, "color2": 0},
    BodyBlemishes: {"color": 0, "color2": 0},
    AddBodyBlemishes: {"color": 0, "color2": 0}
}


$('body').on('click', '.changeGender', function (event) {
    if(charDataGender != $(this).attr("data-value")) {
        charDataGender = $(this).attr("data-value");
        $(this).removeClass('isnotset');

        $(".changeGender").each(function() {
            if($(this).attr("data-value") != charDataGender) $(this).addClass('isnotset');
        });

        $("#changeHair").attr("max", 36 + parseInt(charDataGender)).val(0);

        mp.trigger("charSetGender", parseInt(charDataGender));
    }
});

$('body').on('click', '#inv_cancel', function () {
    $('.range input[type="range"]').each(function() {
        let event = $(this).attr("data-type");
        let setting = $(this).attr("id");
            setting = setting.substring(6, setting.length);
        let input = $(this).attr('oninput').split('.');

        $(this).val(0);
        $("#" + input[0]).val(0);

        setter(event, setting, 0);
    });
});

$('body').on('click', '#inv_confirm', function () {
    mp.trigger('finishCreator');
});

$('body').on('click', '.creator_menu', function (event) {
    $(".creator_menu").each(function() { $(this).removeClass('active'); });
    $(".creator_submenu").each(function() { $(this).stop().fadeOut(250); });
    let menu = $(this).attr("data-menu");
    $(this).addClass('active');

    setTimeout(function() {
        $("#" + menu).stop().fadeIn(250);
    }, 300);
});

$('body').on('click', '.styling_menu', function (event) {
    $(".styling_menu").each(function() { $(this).removeClass('active'); });
    $(".styling_submenu").each(function() { $(this).stop().fadeOut(250); });
    let menu = $(this).attr("data-menu");
    $(this).addClass('active');

    setTimeout(function() {
        $("#" + menu).stop().fadeIn(250);
    }, 300);
});

$(".btn-5").hover(function() {
    let id = $(this).attr("id");

    $("." + id).addClass("hovered");
}, function(){
    let id = $(this).attr("id");
    
    $("." + id).removeClass("hovered");
});

$('.range input[type="range"]').on('input', function() {
    let event = $(this).attr("data-type");
    
    if(event == 'parents') {
        let setting = $(this).attr("id");

            setting = setting.substring(6, setting.length);

        if(this.value < 0) $("#" + setting).val(Math.abs(this.value));
    }
});

function randomize() {
    $('.range input[type="range"]').each(function() {
        let closest = $(this).closest("div");
        if(typeof closest !== 'undefined') {
            if(closest.length && closest[0].id == "makeup") return false;
        }

        let min = parseFloat($(this).attr('min'));
        let max = parseFloat($(this).attr('max'));
        let step = parseFloat($(this).attr('step'));
        let input = $(this).attr('oninput').split('.');
        let event = $(this).attr("data-type");
        let setting = $(this).attr("id");
            setting = setting.substring(6, setting.length);
        let random = 0;

        if(step < 1) {
            random = Math.round((Math.random() * (max - min) + min) * 10) / 10;
        } else {
            random = Math.round(Math.random() * (max - min) + min);
        }

        $(this).val(random);
        $("#" + input[0]).val(random);

        setter(event, setting, random);
    });
}

$('body').on('click', '.randomize', function (event) {
    randomize();
});

$('.range input[type="range"]').on('change', function() {
    let event = $(this).attr("data-type");
    let setting = $(this).attr("id");
        setting = setting.substring(6, setting.length);

    setter(event, setting, this.value);
});

function setter(event, setting, send_value) {
    let array = [];

    if(event == 'parents') {
        charDataParents[setting] = parseFloat(send_value);
        
        Object.entries(charDataParents).forEach(([key, value]) => {
            if(key == 'ShapeMix' || key == 'SkinMix') value = (value + 100) * 0.005;
            array.push(value);
        });

        mp.trigger("charDataParents", JSON.stringify(array));
    } else if(event == 'face') {
        charDataFace[setting] = parseFloat(send_value);
        
        Object.entries(charDataFace).forEach(([key, value]) => {
            array.push(value);
        });

        mp.trigger("charDataFace", JSON.stringify(array));
    } else if(event == 'eyes') {
        $("#eyeColorName").text(eyeColorNames[parseFloat(send_value)]);
        mp.trigger("charDataEyeColor", parseFloat(send_value));
    } else if(event == 'overlay') {
        charDataOverlay[setting] = parseFloat(send_value);
        
        Object.entries(charDataOverlay).forEach(([key, value]) => {
            array.push(value);
        });

        mp.trigger("charDataOverlay", JSON.stringify(array));
    } else if(event == 'overlay_color') {
        charDataOverlayColor[setting].color = send_value;
        
        Object.entries(charDataOverlayColor).forEach(([key, value]) => {
            array.push(value);
        });

        mp.trigger("charDataOverlayColor", JSON.stringify(array));
    } else if(event == 'overlay_color2') {
        charDataOverlayColor[setting].color2 = send_value;
        
        Object.entries(charDataOverlayColor).forEach(([key, value]) => {
            array.push(value);
        });

        mp.trigger("charDataOverlayColor", JSON.stringify(array));
    } else if(event == 'hair') {
        let index = (charDataGender == 0) ? (parseFloat(send_value) > 22) ? parseFloat(send_value) + 1 : parseFloat(send_value) : (parseFloat(send_value) > 23) ? parseFloat(send_value) + 1 : parseFloat(send_value);
        charDataHair = index;
        
        mp.trigger("charDataHair", index);
    } else if(event == 'hairColor') {
        charDataHairColor = parseInt(send_value);
        
        mp.trigger("charDataHairColor", charDataHairColor, charDataHairColorHighlight);
    } else if(event == 'hairColorHighlight') {
        charDataHairColorHighlight = parseInt(send_value);
        
        mp.trigger("charDataHairColor", charDataHairColor, charDataHairColorHighlight);
    }
}